// Prisma schema for Multi-vendor E-commerce
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vendor    Vendor?
  orders    Order[]
  reviews   Review[]
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
}

model Vendor {
  id        String    @id @default(uuid())
  name      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payout    Payout[]
}

model Product {
  id                String      @id @default(uuid())
  name              String
  description       String
  price             Float
  salePrice         Float?
  imageUrl          String?
  vendor            Vendor      @relation(fields: [vendorId], references: [id])
  vendorId          String
  stock             Int         @default(0)
  isActive          Boolean     @default(true)
  category          String?
  brand             String?
  model             String?
  storage           String?
  ram               String?
  color             String?
  ram2              String?
  color2            String?
  condition         String?
  features          Json?
  sku               String?
  enableNegotiation Boolean?
  tags              String[]
  seoTitle          String?
  seoDescription    String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  reviews           Review[]
  orders            OrderItem[]
}

model Order {
  id         String      @id @default(uuid())
  customer   User        @relation(fields: [customerId], references: [id])
  customerId String
  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  total      Float
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Payout {
  id          String       @id @default(uuid())
  vendor      Vendor       @relation(fields: [vendorId], references: [id])
  vendorId    String
  amount      Float
  status      PayoutStatus @default(PENDING)
  requestedAt DateTime     @default(now())
  processedAt DateTime?
}

enum PayoutStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}
